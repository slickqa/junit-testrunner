/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.slickqa.junit.testrunner;

import com.slickqa.junit.testrunner.testplan.TestplanFile;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.LoggingListener;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.junit.platform.launcher.listeners.TestExecutionSummary;
import picocli.CommandLine.Option;
import picocli.CommandLine.Command;
import picocli.CommandLine.HelpCommand;
import picocli.CommandLine;


import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;

@Command(mixinStandardHelpOptions = true, versionProvider = TestRunnerVersionProvider.class,
         subcommands = {HelpCommand.class})
public class TestRunner {

    public String getGreeting() {
        return "Hello world.";
    }

    /*
    commands:
      run:
        - takes standard run options
        - runs tests specified
      schedule:
        - takes standard run options
        - configures slick plugin (system property) to schedule only
      list:
        testcases:
          - takes standard run options
          - activates no-execute jupiter plugin
          - prints names of tests
        testplans:
          - looks in testplans directory (local and in classpath), finds all .yml / .yaml files, and parses and prints
            the names, optionaly descriptions
          - can print counts, if option is selected
          - can print testcases
      export
        - exports to an output directory a testplans.json and a json for each testplan that lists testcases.
      help
        - help for each command
        - help for testplan format
          - list selectors and help for each
          - list filters and help for each

      standard run options:
        positional arguments can be:
          - selector:value
          - filter:value
          - uniqueId
          - testplan (can be local path, or in classpath)
        - -D (set system property)
        -

     */

    public static void main(String[] args) {
        new CommandLine(new TestRunner()).execute(args);
        /*
        try {
            TestplanFile testplan = TestplanFile.readFrom(new File(args[0]));
            System.out.println("We read in testplan " + args[0] + ", there are " + testplan.getSelectors().size() + " selectors and " + testplan.getFilters().size() + " filters.");
            LauncherDiscoveryRequest request = testplan.toLauncherDiscoveryRequest();
            System.out.println("Built a launcher request.");
            Launcher junit = LauncherFactory.create();
            System.out.println("Executing tests...");
            SummaryGeneratingListener summaryListener = new SummaryGeneratingListener();
            junit.execute(request, summaryListener);
            TestExecutionSummary summary = summaryListener.getSummary();
            summary.printTo(new PrintWriter(System.out));
        } catch (IOException e) {
            e.printStackTrace();
        }

         */
    }
}
